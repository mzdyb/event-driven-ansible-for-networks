---
- name: Recover network interface
  hosts: "{{ device }}"

  tasks:
    - name: Shut down interface
      arista.eos.eos_config:
        lines:
          - shutdown
        parents: interface {{ interface }}

    - name: Pause for 5 seconds
      ansible.builtin.pause:
        seconds: 5

    - name: Enable interface
      arista.eos.eos_config:
        lines: no shutdown
        parents: interface {{ interface }}

    - name: Check interface line protocol status
      arista.eos.eos_command:
        commands:
          - command: show ip interface {{ interface }} brief
            output: json
      register: interface_status

    # - ansible.builtin.set_fact:
    #     lineProtocolStatus: interface_status.stdout_lines[0].interfaces[interface].lineProtocolStatus
# 
    # - name: Pass status in workflow
    #   ansible.builtin.set_stats:
    #     data:
    #       int_status_after_recovery: "{{ lineProtocolStatus }}"


    - name: Pass status in workflow
      ansible.builtin.set_stats:
        data:
          lineProtocolStatus: "{{ interface_status.stdout_lines[0].interfaces[interface].lineProtocolStatus }}"

    - name: Show interface status
      ansible.builtin.debug:
        var: lineProtocolStatus
  
    - name: Verify if interface recovered
      ansible.builtin.assert:
        that: lineProtocolStatus == "up"
        fail_msg: "Interface {{ interface }} recovery failed"
        success_msg: "Interface {{ interface }} recovered successfully"
